<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FaultMessage1000" xml:space="preserve">
    <value>An unhandled or catastrophic exception has occurred. Please check the service logs for more details.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1001" xml:space="preserve">
    <value>Validation was badly configured. A list of fields could not be found.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1002" xml:space="preserve">
    <value>Missing mandatory fields for operation {0}.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1003" xml:space="preserve">
    <value>Validation was badly configured. The field {0} doesn't exist.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1004" xml:space="preserve">
    <value>Missing fields for operation {0}.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1005" xml:space="preserve">
    <value>Fields were not in a valid email format for operation {0}.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1006" xml:space="preserve">
    <value>Validation was badly configured. The field to validate {0} doesn't exist.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1007" xml:space="preserve">
    <value>Validation of value types for at least one of the input parameters is not supported.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1008" xml:space="preserve">
    <value>Compare validation failed for operation {0} and parameters {1} and {2}.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1009" xml:space="preserve">
    <value>Input DTO with errors in fields.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1010" xml:space="preserve">
    <value>Missing DTOValidator, cannot create Type {0} from loaded assemblies.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1011" xml:space="preserve">
    <value>Invalid Enumeration Value Exception: {0}.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1012" xml:space="preserve">
    <value>Invalid RUT for operation {0}.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1013" xml:space="preserve">
    <value>Validation was badly configured. The Type {0} doesn't have a Validate method.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1014" xml:space="preserve">
    <value>Validation was badly configured for operation {0}. The input has more than one parameter and no parameter name was given.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1015" xml:space="preserve">
    <value>Validation was badly configured, the compare operator is not supported for the data type {0}.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1016" xml:space="preserve">
    <value>Missing mandatory fields for operation {0}. The fields {1} were present but some or all of the fields {2} were missed.</value>
    <comment>FaultException</comment>
  </data>
  <data name="FaultMessage1017" xml:space="preserve">
    <value>Formatter was badly configured. A valid replacement could not be found.</value>
  </data>
  <data name="FaultMessage1018" xml:space="preserve">
    <value>Formatter was badly configured. Each replacement definition must have exactly two strings.</value>
  </data>
  <data name="FaultMessage1019" xml:space="preserve">
    <value>Formatter was badly configured. The field to be formatted must be provided.</value>
  </data>
  <data name="FaultMessage1020" xml:space="preserve">
    <value>Formatter was badly configured. The field {0} doesn't exist.</value>
  </data>
  <data name="FaultMessage1021" xml:space="preserve">
    <value>Formatter was badly configured. The field {0} is not a string field.</value>
  </data>
  <data name="FaultMessage1050" xml:space="preserve">
    <value>An unhandled configuration error has occurred. Please check the service logs for more details.</value>
    <comment>SystemConfigurationException</comment>
  </data>
</root>